파이썬 주요 자료구조 4가지


각 자료구조의 특징

딕셔너리 {키:값, 키:값 } 검색을 위한 키를 갖는 데이터들의 집합 || 키는 중복 불가, 값은 가능
튜플 (값, 값) 순서가 있는 중복을 허용하는 데이터의 집합. 데이터 변경 불가
리스트 [값,값] 순서가 있고 중복을 허용하는 데이터 집합.
셑 {값, 값} 중복을 허용하지 않는 순서에 상관없는 데이터들의 집합

슬라이스 기능. 문자열뿐만 아니라 리스트에도 적용하여 일정 값을 꺼낼 수 있다


리스트 컴프리헨션
리스트를 빠르게 만들기 위한 독특한 문법구조
리스트 안에 있는 데이터들을 일정한 규칙을 가지고 생성해냄.

 numbers = [ n for n in range(1, 10) ]
1부터 10까지 들어간 리스트 생성


제너레이터

객체들을 하나씩 만들어 넘겨주는 기능
for 문 등에서 효과적으로 사용
yield - 제너레이팅


파이썬 모듈

정의와 문장을 담고 있는 파일

.py

클래스 정의, 함수 정의, 문장

그 자체로도 실행 가능, 다른 모듈에서 임포트해서 사용가능. 
임포트 되면 그 자체가 하나의 객체가 됨. (싱글톤 객체)



게임
가상 세계에 존재하는 객체들의 상호작용 시뮬레이션, 렌더링하는것

게임 객체의 상태 변화 유도 3가지?
물리
AI
사용자 입력


2D 게임

기본 구성요소
배경
캐릭터, 오브젝트
UI - GUI, 입력(키, 마우스,터치)
AI
사운드

2D 게임?
현재 진행 중인 게임 가상월드의 내용 화면 2D 렌더링
배경, 캐릭터 등의 표현을 2D 이미지들의 조합으로 구성


게임 기본 기준들 설정하고 개발 시작

플리커링? - 빠르게 그려나가는 것들이 노출되어 보이면서 깜빡거리는 것 처럼 보이는 것


곡선 및 직선

파라미터를 이용하여 등분하여 표시

스플라인. 베지어

m(t) = (1 - t)*p1 + t * p2, t의 범위: 0 <= t <=1  1차 베지어 직선


카디널 스플라인

파라미터 비율로 선분을 섞어 그림


추상화

꼭 필요한 객체들만
꼭 보여줘야될 내용만
꼭 보여줘야할 움직임만

속성 + 행위 = 객체
속성 - 객체의 상태, 상태를 나타내는 값


게임 기본 구조 - 게임루프

 init
------
Game logic
Drawing		<- 프레임시간
Exit
------------
Finish


속도 * 현재 프레임
게임 내에서 이동한 거리 구하는 법


충돌 검사

게임상 오브젝트간 충돌 발생 검사하는것
모든 게임의 가장 기본적 물리계산


충돌 처리

충돌이 확인된 후, 어떻게 할 것인가?

캐릭터와 아이템의 충돌처리는? 등


AI
FSM - 가장 전통적인 게임 AI 구현 방식

상태 갯수가 늘어남에 따라 와이어링 복잡해짐
정확히 상태를 분리하여 추출하는 것이 어려움
HFSM(Hierachical FSM)이 실전에서는 사용됨.


Behavior Tree

?객체의 인공지능행동을 트리 구조로 구현한 것. ?
FSM 방식 ? 상태와 이벤트에 따라서, 다음 상태를 결정 ?
BT 방식 ? Goal 을 달성하기 위한 Task들을 구성. 재사용이 쉽게 직관적임. 
?HALO 에서 사용된 후, 기본 구조가 공개됨. ?
GTA 등에서도 사용 


기본 구조
트리구조

매 프레임 마다 tree 구조 실행

node는 상태값 반환
성공, 러닝, 실패

Node가 자식노드가 있으면, 자식노드들 실행, 그 결과 종합하여 노드의 최종 값 결정


진폭과 주파수

진폭 - 파형의 크기 - 소리 크기

주파수 - 소리의 높이 - 초당 특정 파형 반복 횟수


직렬화

프로그램 내의 객체를 외부에 저장, 내보내는 행위
나중에 다시 복구할 수 있어야
게임 플레이 상황을 저장, 로드하는것도 직렬화


데이터 파일을 읽어와 값을 넣는 소프트 코딩 방식을 사용하여야 함


JSON
객체를 교환하기 위한 텍스트 형식 표준
파이썬의 리스트와 딕셔너리와 거의 동일
단, 문자열은 " " 사용

Pickle
파이썬이 제공하는 객체 직렬화 모듈
대부분의 파이썬 내부 데이터를 직렬화 가능









